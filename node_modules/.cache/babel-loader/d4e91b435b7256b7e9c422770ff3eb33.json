{"ast":null,"code":"var _jsxFileName = \"/Users/sarahholland/Documents/Nology/Projects/client-project/_nsight/src/pages/students/students.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./students.scss\";\nimport Searchbox from \"../../components/searchbox/searchbox\";\nimport Sort from \"../../components/sort/sort\";\nimport StudentList from \"../../components/studentList/studentList\";\nimport studentsData from \"../../assets/data/student-data\";\nimport Filter from \"../../components/filter/filter\";\nimport chevronLeft from \"../../assets/icons/chevron-left.svg\";\nimport chevronRight from \"../../assets/icons/chevron-right.svg\";\nimport downArrow from \"../../assets/icons/down-arrow.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Students = () => {\n  _s();\n\n  const [students, setStudents] = useState([]);\n  const [studentsCopy, setStudentsCopy] = useState([]);\n  const [pagination, setPagination] = useState(false);\n  const [perPage, setPerPage] = useState(10);\n  const [pageStart, setPageStart] = useState(0);\n  const [pageEnd, setPageEnd] = useState(perPage);\n  const [showResults, setShowResults] = useState(false); // SEARCH by first and last name\n\n  const handleSearch = e => {\n    const sanitiseInput = e.target.value.toLowerCase();\n    const studentSearch = studentsData.filter(student => {\n      const sanitisedStudentFirstName = student.first_name.toLowerCase();\n      const sanitisedStudentLastName = student.last_name.toLowerCase();\n      const sanitisedStudentName = `${sanitisedStudentFirstName} ${sanitisedStudentLastName}`;\n      return sanitisedStudentName.includes(sanitiseInput);\n    });\n    setStudentsCopy(studentSearch);\n    const toShow = studentSearch.slice(pageStart, pageEnd);\n    setStudents(toShow);\n    setShowResults(true);\n\n    if (e.target.value.length === 0) {\n      setShowResults(false);\n      const toShow = studentsData.slice(pageStart, pageEnd);\n      setStudents(toShow);\n      setStudentsCopy(studentData);\n    }\n  }; // SORT by first and last name\n\n\n  const sortAscendingAZ = (a, b) => {\n    if (a.first_name < b.first_name) {\n      return -1;\n    } else if (a.first_name > b.first_name) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  const sortAscendingByFirstName = () => {\n    const studentsSortedByName = studentsCopy.filter(student => student).sort(sortAscendingAZ);\n    setStudentsCopy(studentsSortedByName);\n    const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n    setStudents(toShow);\n  };\n\n  const sortDescendingAZ = (a, b) => {\n    if (b.first_name < a.first_name) {\n      return -1;\n    } else if (b.first_name > a.first_name) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  const sortDescendingByFirstName = () => {\n    const studentsSortedByName = studentsCopy.filter(student => student).sort(sortDescendingAZ);\n    setStudentsCopy(studentsSortedByName);\n    const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n    setStudents(toShow);\n  }; // FILTER - Dynamic filter checkboxes\n\n\n  const unique = (value, index, self) => {\n    return self.indexOf(value) === index;\n  };\n\n  const courseNames = studentsData.map(student => student.course_name);\n  const uniqueCourseNames = courseNames.filter(unique);\n\n  const createStatefulObject = courseNames => {\n    return courseNames.reduce((statefulObject, courseName) => {\n      statefulObject[courseName] = false;\n      return statefulObject;\n    }, {});\n  };\n\n  const [courses, setCourses] = useState(createStatefulObject(uniqueCourseNames));\n\n  const handleSetCourses = courseName => {\n    const tempCourses = { ...courses\n    };\n    tempCourses[courseName] = !tempCourses[courseName];\n    setCourses(tempCourses); // not synchronous\n\n    return tempCourses;\n  };\n\n  const filterByCourseName = e => {\n    const courses = handleSetCourses(e.target.value);\n    const stateArray = [];\n    Object.keys(courses).filter(key => {\n      if (courses[key]) {\n        stateArray.push(key);\n      }\n    });\n    const filteredCourseName = studentsData.filter(student => stateArray.includes(student.course_name));\n\n    if (filteredCourseName.length === 0) {\n      getStudents(studentsData);\n    } else {\n      setStudentsCopy(filteredCourseName);\n      const filtered = filteredCourseName.slice(pageStart, pageEnd);\n      setStudents(filtered);\n    }\n\n    const filteredStateArray = stateArray.filter(courseName => courseName.includes(true));\n\n    if (filteredStateArray) {\n      setShowResults(true);\n    } else {\n      setShowResults(false);\n    }\n  }; // PAGINATION\n\n\n  const displayPage = (pageStart, pageEnd) => {\n    const toShow = studentsData.slice(pageStart, pageEnd);\n    setStudents(toShow);\n  };\n\n  const nextPage = () => {\n    const newPageStart = pageStart + perPage;\n    const newPageEnd = pageEnd + perPage;\n\n    if (newPageStart < studentsCopy.length) {\n      setPageStart(newPageStart);\n    }\n\n    if (newPageEnd > studentsCopy.length) {\n      setPageEnd(studentsCopy.length);\n    } else {\n      setPageEnd(newPageEnd);\n    }\n\n    if (newPageStart < studentsData.length) {\n      const toShow = studentsCopy.slice(newPageStart, newPageEnd);\n      setStudents(toShow);\n    }\n  };\n\n  const previousPage = () => {\n    const newPageStart = pageStart - perPage;\n    let newPageEnd = pageEnd - perPage;\n\n    if (newPageStart >= 0) {\n      setPageStart(newPageStart);\n    }\n\n    if (newPageEnd % perPage != 0) {\n      setPageEnd(pageEnd - newPageEnd % perPage);\n      newPageEnd = pageEnd - newPageEnd % perPage;\n    } else {\n      if (newPageEnd > 0) {\n        setPageEnd(newPageEnd);\n      }\n    }\n\n    if (newPageStart >= 0) {\n      const toShow = studentsCopy.slice(newPageStart, newPageEnd);\n      setStudents(toShow);\n\n      if (pageEnd < perPage) {\n        const toShow = studentsCopy.slice(newPageStart, perPage);\n        setStudents(toShow);\n      } else {\n        const toShow = studentsCopy.slice(newPageStart, newPageEnd);\n        setStudents(toShow);\n      }\n    }\n  };\n\n  const togglePagination = () => {\n    setPagination(!pagination);\n  };\n\n  const togglePerPage = e => {\n    setPerPage(e.target.value);\n    setPageStart(0);\n    setPageEnd(e.target.value);\n    displayPage(0, e.target.value);\n    togglePagination();\n  };\n\n  const getStudents = () => {\n    const toShow = studentsData.slice(pageStart, pageEnd);\n    setStudentsCopy(studentsData);\n    setStudents(toShow);\n  };\n\n  useEffect(() => {\n    getStudents();\n  }, []);\n  let length = 0;\n\n  if (students.length > perPage) {\n    length = perPage;\n  } else {\n    length = students.length;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"student-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"list-title__heading\",\n        children: \"Student List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Searchbox, {\n        handleSearch: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Sort, {\n        sortAscendingByFirstName: sortAscendingByFirstName,\n        sortDescendingByFirstName: sortDescendingByFirstName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        courses: courses,\n        filterByCourseName: filterByCourseName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StudentList, {\n      studentData: students\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Rows per page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: togglePagination,\n        children: [perPage, \" \", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: downArrow,\n          alt: \"down arrow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 57\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), pagination && /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: togglePerPage,\n          value: \"5\",\n          children: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: togglePerPage,\n          value: \"10\",\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: togglePerPage,\n          value: \"15\",\n          children: \"15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: togglePerPage,\n          value: \"20\",\n          children: \"20\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: togglePerPage,\n          value: \"25\",\n          children: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: togglePerPage,\n          value: \"30\",\n          children: \"30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!showResults && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [pageStart + 1, \"-\", pageEnd, \" of \", studentsData.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 34\n      }, this), showResults && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Showing results: \", length, \" of \", studentsCopy.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: chevronLeft,\n      alt: \"previous page\",\n      onClick: previousPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: chevronRight,\n      alt: \"next page\",\n      onClick: nextPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Students, \"SjWNsXvoNFpeQ6sd5yphfVyTFG4=\");\n\n_c = Students;\nexport default Students;\n\nvar _c;\n\n$RefreshReg$(_c, \"Students\");","map":{"version":3,"sources":["/Users/sarahholland/Documents/Nology/Projects/client-project/_nsight/src/pages/students/students.jsx"],"names":["React","useState","useEffect","Searchbox","Sort","StudentList","studentsData","Filter","Students","students","setStudents","studentsCopy","setStudentsCopy","pagination","setPagination","perPage","setPerPage","pageStart","setPageStart","pageEnd","setPageEnd","showResults","setShowResults","handleSearch","e","sanitiseInput","target","value","toLowerCase","studentSearch","filter","student","sanitisedStudentFirstName","first_name","sanitisedStudentLastName","last_name","sanitisedStudentName","includes","toShow","slice","length","studentData","sortAscendingAZ","a","b","sortAscendingByFirstName","studentsSortedByName","sort","sortDescendingAZ","sortDescendingByFirstName","unique","index","self","indexOf","courseNames","map","course_name","uniqueCourseNames","createStatefulObject","reduce","statefulObject","courseName","courses","setCourses","handleSetCourses","tempCourses","filterByCourseName","stateArray","Object","keys","key","push","filteredCourseName","getStudents","filtered","filteredStateArray","displayPage","nextPage","newPageStart","newPageEnd","previousPage","togglePagination","togglePerPage","downArrow","chevronLeft","chevronRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./students.scss\";\nimport Searchbox from \"../../components/searchbox/searchbox\";\nimport Sort from \"../../components/sort/sort\";\nimport StudentList from \"../../components/studentList/studentList\";\nimport studentsData from \"../../assets/data/student-data\";\nimport Filter from \"../../components/filter/filter\";\nimport chevronLeft from \"../../assets/icons/chevron-left.svg\";\nimport chevronRight from \"../../assets/icons/chevron-right.svg\";\nimport downArrow from \"../../assets/icons/down-arrow.svg\";\n\nconst Students = () => {\n    const [students, setStudents] = useState([]);\n    const [studentsCopy, setStudentsCopy] = useState([]);\n    const [pagination, setPagination] = useState(false);\n    const [perPage, setPerPage] = useState(10);\n    const [pageStart, setPageStart] = useState(0);\n    const [pageEnd, setPageEnd] = useState(perPage);\n    const [showResults, setShowResults] = useState(false);\n\n    // SEARCH by first and last name\n    const handleSearch = (e) => {\n        const sanitiseInput = e.target.value.toLowerCase();\n        const studentSearch = studentsData.filter(student => {\n            const sanitisedStudentFirstName = student.first_name.toLowerCase();\n            const sanitisedStudentLastName = student.last_name.toLowerCase();\n            const sanitisedStudentName = `${sanitisedStudentFirstName} ${sanitisedStudentLastName}`;\n            return sanitisedStudentName.includes(sanitiseInput);\n        })\n        setStudentsCopy(studentSearch);\n        const toShow = studentSearch.slice(pageStart, pageEnd);\n        setStudents(toShow);\n\n        setShowResults(true)\n        if (e.target.value.length === 0) {\n            setShowResults(false)\n            const toShow = studentsData.slice(pageStart, pageEnd);\n            setStudents(toShow);\n            setStudentsCopy(studentData)\n        }\n    };\n\n    // SORT by first and last name\n    const sortAscendingAZ = (a, b) => {\n        if (a.first_name < b.first_name) {\n            return -1;\n        } else if (a.first_name > b.first_name) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n\n    const sortAscendingByFirstName = () => {\n        const studentsSortedByName = studentsCopy.filter(student => student).sort(sortAscendingAZ);\n        setStudentsCopy(studentsSortedByName);\n\n        const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n        setStudents(toShow);\n    };\n\n    const sortDescendingAZ = (a, b) => {\n        if (b.first_name < a.first_name) {\n            return -1;\n        } else if (b.first_name > a.first_name) {\n            return 1;\n        } else {\n            return 0;\n        }\n    };\n\n    const sortDescendingByFirstName = () => {\n        const studentsSortedByName = studentsCopy.filter(student => student).sort(sortDescendingAZ);\n        setStudentsCopy(studentsSortedByName);\n\n        const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n        setStudents(toShow);\n    };\n\n    // FILTER - Dynamic filter checkboxes\n    const unique = (value, index, self) => {\n        return self.indexOf(value) === index\n    }\n\n    const courseNames = studentsData.map(student => student.course_name);\n\n    const uniqueCourseNames = courseNames.filter(unique);\n    \n    const createStatefulObject = (courseNames) => {\n        return courseNames.reduce((statefulObject, courseName) => {\n            statefulObject[courseName] = false;\n            return statefulObject;\n        }, {})\n    }\n\n    const [courses, setCourses] = useState(createStatefulObject(uniqueCourseNames))\n\n    const handleSetCourses = (courseName) => {\n        const tempCourses = {...courses};\n        tempCourses[courseName] = !tempCourses[courseName];\n\n        setCourses(tempCourses); // not synchronous\n        return tempCourses;\n    }\n\n    const filterByCourseName = (e) => {\n        const courses = handleSetCourses(e.target.value);\n        const stateArray = [];\n\n        Object.keys(courses).filter(key => {\n            if (courses[key]) {\n                stateArray.push(key)\n            }\n        });\n\n        const filteredCourseName = studentsData.filter(student => stateArray.includes(student.course_name));\n\n        if (filteredCourseName.length === 0) {\n            getStudents(studentsData);\n        } else {\n            setStudentsCopy(filteredCourseName);\n            const filtered = filteredCourseName.slice(pageStart, pageEnd);\n            setStudents(filtered);\n        }\n\n        const filteredStateArray = stateArray.filter(courseName => courseName.includes(true));\n        \n        if (filteredStateArray) {\n            setShowResults(true)\n        } else {\n            setShowResults(false)\n        }\n\n    };\n\n    // PAGINATION\n    const displayPage = (pageStart, pageEnd) => {\n        const toShow = studentsData.slice(pageStart, pageEnd);\n        setStudents(toShow);\n    }\n\n    const nextPage = () => {\n        const newPageStart = pageStart + perPage;\n        const newPageEnd = pageEnd + perPage;\n        if (newPageStart < studentsCopy.length) {\n            setPageStart(newPageStart);\n        }\n        if (newPageEnd > studentsCopy.length) {\n            setPageEnd(studentsCopy.length);\n        } else {\n            setPageEnd(newPageEnd);\n        }\n        if (newPageStart < studentsData.length) {\n            const toShow = studentsCopy.slice(newPageStart, newPageEnd);\n            setStudents(toShow);\n        }\n    }\n\n    const previousPage = () => {\n        const newPageStart = pageStart - perPage;\n        let newPageEnd = pageEnd - perPage;\n        if (newPageStart >= 0) {\n            setPageStart(newPageStart);\n        }\n        if (newPageEnd % perPage != 0) {\n            setPageEnd(pageEnd - (newPageEnd % perPage));\n            newPageEnd = pageEnd - (newPageEnd % perPage);\n        } else {\n            if (newPageEnd > 0) {\n                setPageEnd(newPageEnd);\n            }\n        }\n        if (newPageStart >= 0) {\n            const toShow = studentsCopy.slice(newPageStart, newPageEnd);\n            setStudents(toShow);\n\n            if (pageEnd < perPage) {\n                const toShow = studentsCopy.slice(newPageStart, perPage);\n                setStudents(toShow);\n            } else {\n                const toShow = studentsCopy.slice(newPageStart, newPageEnd);\n                setStudents(toShow);\n            }\n        }\n    }\n\n    const togglePagination = () => {\n        setPagination(!pagination);\n    }\n\n    const togglePerPage = (e) => {\n        setPerPage(e.target.value);\n        setPageStart(0);\n        setPageEnd(e.target.value);\n        displayPage(0, e.target.value);\n        togglePagination();\n    }\n\n    const getStudents = () => {\n        const toShow = studentsData.slice(pageStart, pageEnd);\n        setStudentsCopy(studentsData);\n        setStudents(toShow);\n    };\n\n    useEffect(() => {\n        getStudents();\n    }, []);\n\n    let length = 0;\n    if (students.length > perPage) {\n        length = perPage\n    } else {\n        length = students.length\n    }\n\n\n    return (\n        <div className=\"student-list\">\n            <div className=\"list-title\">\n                <h3 className=\"list-title__heading\">Student List</h3>\n                <Searchbox handleSearch={handleSearch} />\n                <Sort sortAscendingByFirstName={sortAscendingByFirstName} sortDescendingByFirstName={sortDescendingByFirstName} />\n                <Filter courses={courses} filterByCourseName={filterByCourseName} />\n            </div>\n            <StudentList studentData={students} />\n            <div className=\"pagination\">\n                <p>Rows per page</p>\n                <p onClick={togglePagination}>{perPage} <img src={downArrow} alt=\"down arrow\" /></p>\n                {pagination &&\n                    <ul>\n                    <li onClick={togglePerPage} value=\"5\">5</li>\n                    <li onClick={togglePerPage} value=\"10\">10</li>\n                    <li onClick={togglePerPage} value=\"15\">15</li>\n                    <li onClick={togglePerPage} value=\"20\">20</li>\n                    <li onClick={togglePerPage} value=\"25\">25</li>\n                    <li onClick={togglePerPage} value=\"30\">30</li>\n                </ul>}\n                \n            </div>\n            <div>\n                {!showResults && <p>{pageStart+1}-{pageEnd} of {studentsData.length}</p>}\n                {/* students is updated for pagination, so students.length will always be number of rows per page - need to make number of entries total of filter/search result */}\n                {showResults && <p>Showing results: {length} of {studentsCopy.length}</p>}\n            </div>\n            <img src={chevronLeft} alt=\"previous page\" onClick={previousPage} />\n            <img src={chevronRight} alt=\"next page\" onClick={nextPage} />\n        </div>\n    );\n};\n\nexport default Students;\n"]},"metadata":{},"sourceType":"module"}