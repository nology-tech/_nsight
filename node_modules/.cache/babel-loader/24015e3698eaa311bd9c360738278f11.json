{"ast":null,"code":"var _jsxFileName = \"/Users/jeromekithinji/Development/_nsight/src/pages/enrollment/enrollment.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './enrollment.scss';\nimport enrollmentData from \"../../assets/data/enrollment-data\";\nimport Filter from \"../../components/filter/filter\";\nimport EnrollmentList from \"../../components/enrollmentList/enrollmentList\";\nimport TopHeader from '../../components/topheader/topheader';\nimport Searchbox from '../../components/searchbox/searchbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Enrollment = () => {\n  _s();\n\n  const [enrollments, setEnrollments] = useState([]);\n  const [enrollmentsCopy, setEnrollmentsCopy] = useState([]);\n  const [showResults, setShowResults] = useState(false);\n\n  const handleSearch = e => {\n    const sanitiseInput = e.target.value.toLowerCase();\n    const studentSearch = enrollmentData.filter(intake => {\n      intake.students.map(student => {\n        const sanitisedStudentFirstName = student.first_name.toLowerCase();\n        const sanitisedStudentLastName = student.last_name.toLowerCase();\n        const sanitisedStudentName = `${sanitisedStudentFirstName} ${sanitisedStudentLastName}`;\n        console.log(sanitisedStudentName);\n        console.log(\"JOINED DATA\" + sanitisedStudentName.includes(sanitiseInput));\n        return sanitisedStudentName.includes(sanitiseInput);\n      });\n    });\n    setEnrollmentsCopy(studentSearch); // const toShow = studentSearch.slice(pageStart, pageEnd);\n\n    setEnrollments(studentSearch);\n    console.log(\"With search \" + enrollments);\n    setShowResults(true);\n\n    if (e.target.value.length === 0) {\n      setShowResults(false); // const toShow = studentsData.slice(pageStart, pageEnd);\n\n      setEnrollments(enrollmentData);\n      setEnrollmentsCopy(enrollmentData);\n      console.log(\"Without search \" + enrollments);\n    }\n  }; // SORT by first and last name\n\n\n  const sortAscendingAZ = (a, b) => {\n    if (a.first_name < b.first_name) {\n      return -1;\n    } else if (a.first_name > b.first_name) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }; // add another loop to go through students in courses\n\n\n  const sortAscendingByFirstName = () => {\n    const studentsSortedByName = enrollmentsCopy.filter(student => student).sort(sortAscendingAZ);\n    setStudentsCopy(studentsSortedByName);\n    const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n    setStudents(toShow);\n  };\n\n  const sortDescendingAZ = (a, b) => {\n    if (b.first_name < a.first_name) {\n      return -1;\n    } else if (b.first_name > a.first_name) {\n      return 1;\n    } else {\n      return 0;\n    }\n  };\n\n  const sortDescendingByFirstName = () => {\n    const studentsSortedByName = studentsCopy.filter(student => student).sort(sortDescendingAZ);\n    setStudentsCopy(studentsSortedByName);\n    const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n    setStudents(toShow);\n  };\n\n  const courseNames = enrollmentData.map(courses => courses.intakeName);\n\n  const createStatefulObject = courseNames => {\n    return courseNames.reduce((statefulObject, courseName) => {\n      statefulObject[courseName] = false;\n      return statefulObject;\n    }, {});\n  };\n\n  const [courses, setCourses] = useState(createStatefulObject(courseNames));\n\n  const handleSetCourses = courseName => {\n    const tempCourses = { ...courses\n    };\n    tempCourses[courseName] = !tempCourses[courseName];\n    setCourses(tempCourses); // not synchronous\n\n    return tempCourses;\n  };\n\n  const filterByCourseName = e => {\n    const courses = handleSetCourses(e.target.value);\n    const stateArray = Object.keys(courses).filter(key => courses[key]);\n    const filteredCourseName = enrollmentData.filter(intake => stateArray.includes(intake.intakeName));\n\n    if (filteredCourseName.length === 0) {\n      getEnrollments(enrollmentData);\n    } else {\n      setEnrollmentsCopy(filteredCourseName);\n      setEnrollments(filteredCourseName);\n    }\n\n    const filteredStateArray = stateArray.filter(courseName => courseName.includes(true));\n\n    if (filteredStateArray) {\n      setShowResults(true);\n    } else {\n      setShowResults(false);\n    }\n  };\n\n  const getEnrollments = () => {\n    setEnrollments(enrollmentData);\n    setEnrollmentsCopy(enrollmentData);\n  };\n\n  useEffect(() => {\n    getEnrollments();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"enrollment-container\",\n    children: [/*#__PURE__*/_jsxDEV(TopHeader, {\n      title: \"Enrollments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Searchbox, {\n      handleSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      courses: courses,\n      filterByCourseName: filterByCourseName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"enrollment-list\",\n      children: /*#__PURE__*/_jsxDEV(EnrollmentList, {\n        enrollmentData: enrollments\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Enrollment, \"SSnd3/pl0uftECh34XXlPKk3De8=\");\n\n_c = Enrollment;\nexport default Enrollment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Enrollment\");","map":{"version":3,"sources":["/Users/jeromekithinji/Development/_nsight/src/pages/enrollment/enrollment.jsx"],"names":["React","useEffect","useState","enrollmentData","Filter","EnrollmentList","TopHeader","Searchbox","Enrollment","enrollments","setEnrollments","enrollmentsCopy","setEnrollmentsCopy","showResults","setShowResults","handleSearch","e","sanitiseInput","target","value","toLowerCase","studentSearch","filter","intake","students","map","student","sanitisedStudentFirstName","first_name","sanitisedStudentLastName","last_name","sanitisedStudentName","console","log","includes","length","sortAscendingAZ","a","b","sortAscendingByFirstName","studentsSortedByName","sort","setStudentsCopy","toShow","slice","pageStart","pageEnd","setStudents","sortDescendingAZ","sortDescendingByFirstName","studentsCopy","courseNames","courses","intakeName","createStatefulObject","reduce","statefulObject","courseName","setCourses","handleSetCourses","tempCourses","filterByCourseName","stateArray","Object","keys","key","filteredCourseName","getEnrollments","filteredStateArray"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './enrollment.scss'\nimport enrollmentData from \"../../assets/data/enrollment-data\";\nimport Filter from \"../../components/filter/filter\"\nimport EnrollmentList from \"../../components/enrollmentList/enrollmentList\"\nimport TopHeader from '../../components/topheader/topheader';\nimport Searchbox from '../../components/searchbox/searchbox';\n\nconst Enrollment = () => {\n\n    const [enrollments, setEnrollments] = useState([]);\n    const [enrollmentsCopy, setEnrollmentsCopy] = useState([]);\n    const [showResults, setShowResults] = useState(false);\n\n    const handleSearch = (e) => {\n        const sanitiseInput = e.target.value.toLowerCase();\n        const studentSearch = enrollmentData.filter((intake) => {\n            intake.students.map((student) => {\n                const sanitisedStudentFirstName = student.first_name.toLowerCase();\n                const sanitisedStudentLastName = student.last_name.toLowerCase();\n                const sanitisedStudentName = `${sanitisedStudentFirstName} ${sanitisedStudentLastName}`;\n                console.log(sanitisedStudentName);\n                console.log(\"JOINED DATA\" + sanitisedStudentName.includes(sanitiseInput))\n                return sanitisedStudentName.includes(sanitiseInput);\n            })\n        });\n        setEnrollmentsCopy(studentSearch);\n        // const toShow = studentSearch.slice(pageStart, pageEnd);\n        setEnrollments(studentSearch);\n        console.log(\"With search \" + enrollments);\n\n\n        setShowResults(true);\n        if (e.target.value.length === 0) {\n            setShowResults(false);\n            // const toShow = studentsData.slice(pageStart, pageEnd);\n            setEnrollments(enrollmentData);\n            setEnrollmentsCopy(enrollmentData);\n            console.log(\"Without search \" + enrollments);\n        }\n    };\n\n        // SORT by first and last name\n        const sortAscendingAZ = (a, b) => {\n            if (a.first_name < b.first_name) {\n                return -1;\n            } else if (a.first_name > b.first_name) {\n                return 1;\n            } else {\n                return 0;\n            }\n        };\n    \n        // add another loop to go through students in courses\n        const sortAscendingByFirstName = () => {\n            const studentsSortedByName = enrollmentsCopy\n                .filter((student) => student)\n                .sort(sortAscendingAZ);\n            setStudentsCopy(studentsSortedByName);\n    \n            const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n            setStudents(toShow);\n        };\n    \n        const sortDescendingAZ = (a, b) => {\n            if (b.first_name < a.first_name) {\n                return -1;\n            } else if (b.first_name > a.first_name) {\n                return 1;\n            } else {\n                return 0;\n            }\n        };\n    \n        const sortDescendingByFirstName = () => {\n            const studentsSortedByName = studentsCopy\n                .filter((student) => student)\n                .sort(sortDescendingAZ);\n            setStudentsCopy(studentsSortedByName);\n    \n            const toShow = studentsSortedByName.slice(pageStart, pageEnd);\n            setStudents(toShow);\n        };\n\n    const courseNames = enrollmentData.map((courses) => courses.intakeName);\n\n    const createStatefulObject = (courseNames) => {\n        return courseNames.reduce((statefulObject, courseName) => {\n            statefulObject[courseName] = false;\n            return statefulObject;\n        }, {});\n    };\n\n    const [courses, setCourses] = useState(\n        createStatefulObject(courseNames)\n    );\n\n    const handleSetCourses = (courseName) => {\n        const tempCourses = { ...courses };\n        tempCourses[courseName] = !tempCourses[courseName];\n\n        setCourses(tempCourses); // not synchronous\n        return tempCourses;\n    };\n\n    const filterByCourseName = (e) => {\n        const courses = handleSetCourses(e.target.value);\n        const stateArray = Object.keys(courses).filter((key) => courses[key]);\n\n        const filteredCourseName = enrollmentData.filter((intake) =>\n            stateArray.includes(intake.intakeName)\n        );\n\n        if (filteredCourseName.length === 0) {\n            getEnrollments(enrollmentData);\n        } else {\n            setEnrollmentsCopy(filteredCourseName);\n            setEnrollments(filteredCourseName);\n        }\n\n        const filteredStateArray = stateArray.filter((courseName) =>\n            courseName.includes(true)\n        );\n\n        if (filteredStateArray) {\n            setShowResults(true);\n        } else {\n            setShowResults(false);\n        }\n    };\n\n    const getEnrollments = () => {\n        setEnrollments(enrollmentData);\n        setEnrollmentsCopy(enrollmentData);\n    }\n\n    useEffect(() => {\n        getEnrollments();\n    }, []);\n\n    return (\n        <div className=\"enrollment-container\">\n            <TopHeader title=\"Enrollments\"/>\n            <Searchbox handleSearch={handleSearch} />\n            <Filter courses={courses} filterByCourseName={filterByCourseName} />\n            <div className=\"enrollment-list\">\n                <EnrollmentList enrollmentData={enrollments} />\n            </div>\n        </div>\n    )\n}\n\nexport default Enrollment\n"]},"metadata":{},"sourceType":"module"}